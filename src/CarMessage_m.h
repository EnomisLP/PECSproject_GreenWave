//
// Generated file, do not edit! Created by opp_msgtool 6.0 from CarMessage.msg.
//

#ifndef __CARMESSAGE_M_H
#define __CARMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class CarMessage;
/**
 * Class generated from <tt>CarMessage.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message CarMessage
 * {
 *     int ID = 0;
 *     double V = 0.0;
 *     double C = 0;
 *     double arrivalTime = 0; //To register the time a car arrive in a queue
 *     double departureTime = 0; // To register the time a car depart from a queue
 *     double waitingTime = 0;
 *     bool isStopped = true;
 *     double arrivalRoadTime = 0;// To register the time a car arrives in the road
 * }
 * </pre>
 */
class CarMessage : public ::omnetpp::cMessage
{
  protected:
    int ID = 0;
    double V = 0.0;
    double C = 0;
    double arrivalTime = 0;
    double departureTime = 0;
    double waitingTime = 0;
    bool isStopped_ = true;
    double arrivalRoadTime = 0;

  private:
    void copy(const CarMessage& other);

  protected:
    bool operator==(const CarMessage&) = delete;

  public:
    CarMessage(const char *name=nullptr, short kind=0);
    CarMessage(const CarMessage& other);
    virtual ~CarMessage();
    CarMessage& operator=(const CarMessage& other);
    virtual CarMessage *dup() const override {return new CarMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getID() const;
    virtual void setID(int ID);

    virtual double getV() const;
    virtual void setV(double V);

    virtual double getC() const;
    virtual void setC(double C);

    virtual double getArrivalTime() const;
    virtual void setArrivalTime(double arrivalTime);

    virtual double getDepartureTime() const;
    virtual void setDepartureTime(double departureTime);

    virtual double getWaitingTime() const;
    virtual void setWaitingTime(double waitingTime);

    virtual bool isStopped() const;
    virtual void setIsStopped(bool isStopped);

    virtual double getArrivalRoadTime() const;
    virtual void setArrivalRoadTime(double arrivalRoadTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CarMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CarMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline CarMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<CarMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CARMESSAGE_M_H

